//https://leetcode.com/problems/search-a-2d-matrix/
class Solution {
public:
    
    
   bool Binary_Search ( int row , int col , vector<vector<int>>& M , int target )
    {
        
        int low = 0 , high= col -1 ; 
        while( low <= high )
        {
            int mid = ( low + high ) /2 ; 
            if ( M [ row ] [ mid ] == target )
                    return 1 ; 
            else if ( M [ row ][ mid ] > target )
                    high =  mid -1 ; 
            else 
                    low = mid + 1 ;
        }
        
        return 0 ; 
    } 
    bool searchMatrix(vector<vector<int>>& M, int target) {
        
        
        
        int n = M.size() ; 
        if ( n <= 0)
                return 0 ; 
        int m = M [ 0 ].size() ; 
        if ( m <=0 )
                return 0 ; 
        int arr [ n ] ; 
        for ( int i = 0 ; i < n ; i ++ )
                arr [ i ] = M [ i ] [ 0 ] ;
        
        int row = upper_bound ( arr , arr + n ,  target ) - arr - 1 ; 
        if ( row < 0 )
                return 0 ; 
        return Binary_Search ( row ,  m , M , target) ; 
        
    }
};

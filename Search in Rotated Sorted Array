// https://leetcode.com/problems/search-in-rotated-sorted-array/


class Solution {
public:
    
    
    int binary_search ( vector < int >  arr ,  int low  , int high  , int target) 
    {
        
        
        while ( low <= high )
        {
            int mid =( low + high) /2 ; 
            if  ( arr [ mid ] == target )
                    return mid ; 
            
            if ( arr [ mid ] > target )
                    high = mid - 1 ; 
            
            else 
                    low = mid + 1 ; 
        }
        
        
        return -1 ; 
    }
    int search(vector<int>& arr , int target) {
        
        
        int n = arr.size() ; 
        if (!n)
                return -1;
        int ans = 0  ; 
        int low = 0 , high = n - 1 ; 
        
        while ( low <= high )
        {
            cout << high <<  " " << low << endl ; 
            if ( high == low )
            {
                ans = low ; 
                break ; 
            }
            
            int mid = ( low + high ) / 2 ; 
            if ( mid - 1 >= 0 and arr [ mid - 1 ] > arr [ mid ] )
            {
                ans = mid ; 
                break ; 
            }
            
            if ( mid + 1 < n and arr [ mid ] > arr [ mid + 1 ] )
            {
                ans = mid + 1 ; 
                break ; 
            }
            if ( arr [ high ] > arr [ mid ] )
                    high = mid - 1 ; 
            else 
                    if ( arr [ high ] < arr [ mid ] )
                    low = mid + 1 ;
            
        }
        
        
        cout << ans << endl ; 
        if ( ans == 0 )
                ans = n ; 
        if ( target >= arr [ 0 ] and target <= arr [ ans - 1 ] )
                return binary_search ( arr , 0 , ans - 1 , target ) ; 
        
        return binary_search ( arr ,  ans , n - 1 , target) ;
        
      
        
    }
};

//https://leetcode.com/problems/shortest-unsorted-continuous-subarray/


class Solution {
public:
    int findUnsortedSubarray(vector<int>& arr) {
        
        
        int n = arr.size() ;
        if ( n == 0 or n == 1 )
                return 0 ; 
       
        int left = 1 , right = n - 2 ,  maxi = INT_MIN , mini = INT_MAX , flag = 0  ;
        
        //cout << left << " " << right << endl ; 
        for (   ; left < n ; left ++ )
        {
            if ( arr [ left - 1 ] > arr [ left ] )
                    flag = 1 ; 
            if ( flag )
                    mini = min ( arr [ left ] , mini ) ; 
        }
        if ( !flag )
                return 0 ; 
        cout << mini << endl ; 
        left = n - 1 ; 
        while ( left >=0 and arr [ left ]  > mini )
                left -- ; 
        
        left ++ ; 
        cout << left << endl ; 
        flag = 0 ; 
        for (  ; right >= 0 ; right -- )
        {
            if ( arr [ right + 1 ] < arr [ right  ] )
                    flag  = 1 ;
            if ( flag )
                    maxi = max ( arr [ right ] , maxi  ) ; 
        }
        
        
        right = 0 ; 
        
        while( right < n and arr [ right ] < maxi )
                right ++ ; 
        
        right -- ; 
        
        cout << left << " " << right << endl ; 
        int ans = right - left + 1 < 0 ? 0 :  right - left + 1  ; 
        return ans  ; 
        
        
    }
};


